#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netdb.h>

#define BUFFER_SIZE 8192

// Function to remove a specific header from the request
void remove_header(char *request, const char *header_name) {
    char *start = strstr(request, header_name);
    if (start) {
        char *end = strstr(start, "\r\n");
        if (end) {
            memmove(start, end + 2, strlen(end + 2) + 1);
        }
    }
}

// Function to modify the User-Agent header
void modify_user_agent(char *request) {
    char *user_agent = strstr(request, "User-Agent:");
    if (user_agent) {
        char *end = strstr(user_agent, "\r\n");
        if (end) {
            char new_user_agent[] = "User-Agent: MyCustomProxy/1.0\r\n";
            memmove(user_agent, new_user_agent, strlen(new_user_agent));
            memmove(user_agent + strlen(new_user_agent), end + 2, strlen(end + 2) + 1);
        }
    }
}

// Function to forward HTTP request to actual server and return response
void forward_http_request(int client_sock, char *request, char *host, int port) {
    struct sockaddr_in server_addr;
    struct hostent *server;
    
    int server_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (server_sock < 0) {
        perror("Error opening socket");
        return;
    }

    server = gethostbyname(host);
    if (!server) {
        perror("No such host");
        return;
    }

    memset((char *)&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    memcpy((char *)&server_addr.sin_addr.s_addr, (char *)server->h_addr, server->h_length);
    server_addr.sin_port = htons(port);

    if (connect(server_sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        return;
    }

    // Modify the HTTP request before sending
    remove_header(request, "Accept-Encoding:"); // Prevent compression for easier parsing
    modify_user_agent(request); // Change User-Agent

    // Forward the modified request to the actual web server
    send(server_sock, request, strlen(request), 0);

    // Read response from the server and send it back to the client
    char buffer[BUFFER_SIZE];
    ssize_t bytes_received;
    while ((bytes_received = recv(server_sock, buffer, BUFFER_SIZE, 0)) > 0) {
        send(client_sock, buffer, bytes_received, 0);
    }

    close(server_sock);
}

// Function to handle client requests
void handle_client(int client_sock) {
    char buffer[BUFFER_SIZE];
    recv(client_sock, buffer, BUFFER_SIZE, 0);

    // Extract the Host header
    char host[256];
    sscanf(strstr(buffer, "Host: ") + 6, "%255s", host);
    
    // Forward the request to the actual server (default port 80)
    forward_http_request(client_sock, buffer, host, 80);
    
    close(client_sock);
}

// Main function to start the proxy server
int main() {
    int proxy_sock, client_sock;
    struct sockaddr_in proxy_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);

    proxy_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (proxy_sock < 0) {
        perror("Error opening socket");
        exit(1);
    }

    proxy_addr.sin_family = AF_INET;
    proxy_addr.sin_addr.s_addr = INADDR_ANY;
    proxy_addr.sin_port = htons(8080);

    if (bind(proxy_sock, (struct sockaddr *)&proxy_addr, sizeof(proxy_addr)) < 0) {
        perror("Binding failed");
        exit(1);
    }

    listen(proxy_sock, 5);
    printf("Proxy server listening on port 8080...\n");

    while (1) {
        client_sock = accept(proxy_sock, (struct sockaddr *)&client_addr, &client_len);
        if (client_sock < 0) {
            perror("Error accepting connection");
            continue;
        }
        handle_client(client_sock);
    }

    close(proxy_sock);
    return 0;
}
