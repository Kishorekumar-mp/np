#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/socket.h>
#include <sys/epoll.h>
#include <fcntl.h>
#include <errno.h>

#define BUFFER_SIZE 8192
#define MAX_EVENTS 100

// Function to set a socket as non-blocking
void set_nonblocking(int sock) {
    int flags = fcntl(sock, F_GETFL, 0);
    fcntl(sock, F_SETFL, flags | O_NONBLOCK);
}

// Function to create a connection to the target server
int connect_to_server(const char *host, int port) {
    struct sockaddr_in server_addr;
    struct hostent *server;
    
    int server_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (server_sock < 0) {
        perror("Error creating socket");
        return -1;
    }

    set_nonblocking(server_sock);

    server = gethostbyname(host);
    if (!server) {
        perror("No such host");
        close(server_sock);
        return -1;
    }

    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    memcpy(&server_addr.sin_addr.s_addr, server->h_addr, server->h_length);
    server_addr.sin_port = htons(port);

    if (connect(server_sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        if (errno != EINPROGRESS) {
            perror("Connection failed");
            close(server_sock);
            return -1;
        }
    }

    return server_sock;
}

// Function to handle client connections
void handle_client(int epoll_fd, int client_sock) {
    char buffer[BUFFER_SIZE];
    ssize_t bytes_read = recv(client_sock, buffer, BUFFER_SIZE - 1, 0);
    if (bytes_read <= 0) {
        close(client_sock);
        return;
    }
    buffer[bytes_read] = '\0';

    if (strncmp(buffer, "CONNECT", 7) == 0) {
        char host[256];
        int port;
        sscanf(buffer, "CONNECT %255[^:]:%d", host, &port);

        int server_sock = connect_to_server(host, port);
        if (server_sock < 0) {
            char *error_response = "HTTP/1.1 502 Bad Gateway\r\n\r\n";
            send(client_sock, error_response, strlen(error_response), 0);
            close(client_sock);
            return;
        }

        char *success_response = "HTTP/1.1 200 Connection Established\r\n\r\n";
        send(client_sock, success_response, strlen(success_response), 0);

        struct epoll_event ev;
        ev.events = EPOLLIN | EPOLLOUT | EPOLLET;
        ev.data.fd = client_sock;
        epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_sock, &ev);

        ev.data.fd = server_sock;
        epoll_ctl(epoll_fd, EPOLL_CTL_ADD, server_sock, &ev);
    } else {
        char *error_response = "HTTP/1.1 405 Method Not Allowed\r\n\r\n";
        send(client_sock, error_response, strlen(error_response), 0);
        close(client_sock);
    }
}

// Function to forward data between client and server
void forward_data(int src_sock, int dest_sock) {
    char buffer[BUFFER_SIZE];
    ssize_t bytes_read = recv(src_sock, buffer, BUFFER_SIZE, 0);

    if (bytes_read <= 0) {
        close(src_sock);
        close(dest_sock);
        return;
    }

    send(dest_sock, buffer, bytes_read, 0);
}

// Main function to start the proxy server
int main() {
    int proxy_sock, epoll_fd;
    struct sockaddr_in proxy_addr;
    
    proxy_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (proxy_sock < 0) {
        perror("Error opening socket");
        exit(1);
    }

    set_nonblocking(proxy_sock);

    proxy_addr.sin_family = AF_INET;
    proxy_addr.sin_addr.s_addr = INADDR_ANY;
    proxy_addr.sin_port = htons(8080);

    if (bind(proxy_sock, (struct sockaddr *)&proxy_addr, sizeof(proxy_addr)) < 0) {
        perror("Binding failed");
        exit(1);
    }

    listen(proxy_sock, 100);
    printf("Proxy server listening on port 8080...\n");

    epoll_fd = epoll_create1(0);
    if (epoll_fd < 0) {
        perror("Epoll creation failed");
        exit(1);
    }

    struct epoll_event ev, events[MAX_EVENTS];
    ev.events = EPOLLIN;
    ev.data.fd = proxy_sock;
    epoll_ctl(epoll_fd, EPOLL_CTL_ADD, proxy_sock, &ev);

    while (1) {
        int num_events = epoll_wait(epoll_fd, events, MAX_EVENTS, -1);
        for (int i = 0; i < num_events; i++) {
            int event_fd = events[i].data.fd;

            if (event_fd == proxy_sock) {
                struct sockaddr_in client_addr;
                socklen_t client_len = sizeof(client_addr);
                int client_sock = accept(proxy_sock, (struct sockaddr *)&client_addr, &client_len);
                if (client_sock < 0) {
                    perror("Error accepting connection");
                    continue;
                }

                set_nonblocking(client_sock);
                ev.events = EPOLLIN | EPOLLET;
                ev.data.fd = client_sock;
                epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_sock, &ev);
            } else {
                handle_client(epoll_fd, event_fd);
            }
        }
    }

    close(proxy_sock);
    close(epoll_fd);
    return 0;
}
