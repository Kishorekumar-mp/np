#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <unistd.h>

#define MYPORT "3490"  // The port clients will connect to
#define BACKLOG 10     // Maximum number of pending connections

int main(void)
{
    struct sockaddr_storage their_addr;  // Stores client's address
    socklen_t addr_size;                 // Size of their_addr
    struct addrinfo hints, *res;         // Address information
    int sockfd, new_fd;                  // Original listening socket and new connection socket

    // Step 1: Set up the address structure
    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;  // Allow IPv4 or IPv6
    hints.ai_socktype = SOCK_STREAM; // TCP socket
    hints.ai_flags = AI_PASSIVE;    // Use my IP address

    // Get address info for the port
    if (getaddrinfo(NULL, MYPORT, &hints, &res) != 0) {
        perror("getaddrinfo");
        exit(1);
    }

    // Step 2: Create a socket
    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
    if (sockfd == -1) {
        perror("socket");
        exit(1);
    }

    // Step 3: Bind the socket to the port
    if (bind(sockfd, res->ai_addr, res->ai_addrlen) == -1) {
        perror("bind");
        exit(1);
    }

    // Step 4: Listen for incoming connections
    if (listen(sockfd, BACKLOG) == -1) {
        perror("listen");
        exit(1);
    }

    printf("Server is listening on port %s...\n", MYPORT);

    // Step 5: Accept an incoming connection
    addr_size = sizeof(their_addr);
    new_fd = accept(sockfd, (struct sockaddr *)&their_addr, &addr_size);  // Get new socket for communication
    if (new_fd == -1) {
        perror("accept");
        exit(1);
    }

    // Step 6: Successfully connected with the client
    printf("New connection accepted.\n");

    // Step 7: Now you can communicate with the client using the new_fd socket
    // For example, you could use send() and recv() here
    
    // Step 8: Close the connection when done
    close(new_fd);   // Close the connection socket
    close(sockfd);   // Close the listening socket when you are done accepting connections

    return 0;
}
