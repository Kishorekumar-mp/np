#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/select.h>

#define PORT 3490      // Port to listen on
#define MAX_CLIENTS 10 // Maximum clients

int main() {
    int server_fd, new_fd, client_fds[MAX_CLIENTS], max_fd, activity, i, valread;
    struct sockaddr_in server_addr, client_addr;
    socklen_t addr_len;
    fd_set read_fds;
    char buffer[1024];

    // Initialize client socket array
    for (i = 0; i < MAX_CLIENTS; i++) {
        client_fds[i] = 0;
    }

    // Create server socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket failed");
        exit(EXIT_FAILURE);
    }

    // Bind socket to IP/Port
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    if (bind(server_fd, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        perror("Bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Start listening
    if (listen(server_fd, MAX_CLIENTS) == -1) {
        perror("Listen failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    printf("Server listening on port %d...\n", PORT);

    while (1) {
        FD_ZERO(&read_fds);
        FD_SET(server_fd, &read_fds);
        max_fd = server_fd;

        // Add client sockets to set
        for (i = 0; i < MAX_CLIENTS; i++) {
            if (client_fds[i] > 0)
                FD_SET(client_fds[i], &read_fds);
            if (client_fds[i] > max_fd)
                max_fd = client_fds[i];
        }

        // Monitor sockets for activity
        activity = select(max_fd + 1, &read_fds, NULL, NULL, NULL);
        if (activity < 0 && errno != EINTR) {
            perror("Select error");
        }

        // New client connection
        if (FD_ISSET(server_fd, &read_fds)) {
            addr_len = sizeof(client_addr);
            if ((new_fd = accept(server_fd, (struct sockaddr *)&client_addr, &addr_len)) < 0) {
                perror("Accept error");
                exit(EXIT_FAILURE);
            }

            printf("New connection from %s:%d\n",
                   inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

            // Add new client to array
            for (i = 0; i < MAX_CLIENTS; i++) {
                if (client_fds[i] == 0) {
                    client_fds[i] = new_fd;
                    break;
                }
            }
        }

        // Check client activity
        for (i = 0; i < MAX_CLIENTS; i++) {
            int sock = client_fds[i];

            if (FD_ISSET(sock, &read_fds)) {
                valread = read(sock, buffer, sizeof(buffer) - 1);

                // Client disconnected
                if (valread == 0) {
                    getpeername(sock, (struct sockaddr *)&client_addr, &addr_len);
                    printf("Client disconnected: %s:%d\n",
                           inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));
                    close(sock);
                    client_fds[i] = 0;
                }
                // Echo message back to client
                else {
                    buffer[valread] = '\0';
                    printf("Received: %s\n", buffer);
                    send(sock, buffer, valread, 0);
                }
            }
        }
    }

    return 0;
}
