#include <stdio.h>      // Standard I/O functions
#include <stdlib.h>     // For exit() function
#include <string.h>     // For memset()
#include <unistd.h>     // For close() function
#include <sys/types.h>  // Data types used in socket programming
#include <sys/socket.h> // For socket-related functions
#include <netdb.h>      // For getaddrinfo()
#include <arpa/inet.h>  // For inet_ntop()

int main() {
    struct addrinfo hints, *res;  // Structure to hold address information
    int sockfd;  // File descriptor for the socket

    // Step 1: Set up the address structure
    memset(&hints, 0, sizeof hints);  // Clear the memory for hints structure
    hints.ai_family = AF_UNSPEC;      // Support both IPv4 and IPv6
    hints.ai_socktype = SOCK_STREAM;  // Use TCP (connection-oriented)

    // Step 2: Get the server address information
    printf("Resolving server address...\n");
    if (getaddrinfo("www.example.com", "3490", &hints, &res) != 0) {
        perror("getaddrinfo");  // Print the error message if getaddrinfo() fails
        exit(1);
    }
    printf("Server address resolved successfully.\n");

    // Step 3: Create a socket
    printf("Creating socket...\n");
    sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
    if (sockfd == -1) {
        perror("socket");  // Print the error if socket creation fails
        freeaddrinfo(res); // Free allocated memory before exiting
        exit(1);
    }
    printf("Socket created successfully.\n");

    // Step 4: Connect to the server
    printf("Connecting to server...\n");
    if (connect(sockfd, res->ai_addr, res->ai_addrlen) == -1) {
        perror("connect");  // Print the error if connection fails
        close(sockfd);      // Close the socket before exiting
        freeaddrinfo(res);  // Free allocated memory
        exit(1);
    }
    printf("Connected to the server successfully!\n");

    // Step 5: Print server's IP address
    char ip_str[INET6_ADDRSTRLEN]; // Buffer to store IP address as a string
    void *addr;

    if (res->ai_family == AF_INET) { // IPv4
        struct sockaddr_in *ipv4 = (struct sockaddr_in *)res->ai_addr;
        addr = &(ipv4->sin_addr);
    } else { // IPv6
        struct sockaddr_in6 *ipv6 = (struct sockaddr_in6 *)res->ai_addr;
        addr = &(ipv6->sin6_addr);
    }

    inet_ntop(res->ai_family, addr, ip_str, sizeof ip_str); // Convert binary IP to string
    printf("Connected to IP: %s\n", ip_str);

    // Step 6: Close the socket
    printf("Closing socket...\n");
    close(sockfd);  // Close the socket connection
    freeaddrinfo(res); // Free allocated memory for address information
    printf("Socket closed. Program exiting successfully.\n");

    return 0;
}
